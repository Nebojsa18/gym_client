/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import communication.Communication;
import domain.Coach;
import domain.Member;
import domain.TrainingSession;
import model.CoachTableModel;
import model.MemberTableModel;
import model.TrainingSessionModel;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import logic.ClassType;
import logic.ShowTypeEnum;

/**
 *
 * @author Admin
 */
public class FrmViewAll extends javax.swing.JFrame {

    private Socket socket;
    private List<Member> members;
    private List<Coach> coaches;
    private List<TrainingSession> sessions;
    private ClassType type;
    
    public FrmViewAll(Socket socket, ClassType type) {
        initComponents();
        this.type=type;
        this.socket=socket;
        members=new ArrayList<>();
        coaches=new ArrayList<>();
        sessions=new ArrayList<>();
        if(type.equals(type.TRAININGSESSION)){
            prepareForm();
        }
        if(type.equals(type.COACH)){
            btnDelete.setVisible(false);
        }
        prepareTable();
        setLocationRelativeTo(null);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        lblSearch = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnChange.setText("Edit");
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblSearch.setText("Search lastname");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnChange, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearch))
                            .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(btnChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(lblSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(type.equals(ClassType.MEMBER)){  
            JFrame frmMember= new FrmMember(socket,null,ShowTypeEnum.ADD,this);
            frmMember.setVisible(true);
            frmMember.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            //prepareTable();
        }else if(type.equals(ClassType.COACH)){
            JFrame frmCoach = new FrmCoach(socket, null, ShowTypeEnum.ADD, this);
            frmCoach.setVisible(true);
            frmCoach.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }else{
            JFrame frmSession = new FrmTrainingSession(socket, null,ShowTypeEnum.ADD,this);
            frmSession.setVisible(true);
            frmSession.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        int row = tbl.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row in table", "Error", JOptionPane.ERROR_MESSAGE);
            //JOptionPane.showMessageDialog(this,"Training session can not be loaded", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(type.equals(ClassType.MEMBER)){
            try {
                Member member = ((MemberTableModel)tbl.getModel()).getMember(row);
                Member mLoaded = Communication.getInstance().loadMember(member);
                JOptionPane.showMessageDialog(this, "Member has been loaded");
                JFrame frmMember = new FrmMember(socket,mLoaded,ShowTypeEnum.EDIT,this);
                frmMember.setVisible(true);
                frmMember.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,"Member can not be loaded", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else if(type.equals(ClassType.COACH)){
            try {
                Coach coach = ((CoachTableModel)tbl.getModel()).getCoach(row);
                Coach cLoaded = Communication.getInstance().loadCoach(coach);
                JOptionPane.showMessageDialog(this, "Coach has been loaded");
                JFrame frmCoach = new FrmCoach(socket, cLoaded, ShowTypeEnum.EDIT, this);
                frmCoach.setVisible(true);
                frmCoach.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,"Coach can not be loaded", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            try {
                TrainingSession ts = ((TrainingSessionModel)tbl.getModel()).getSession(row);
                TrainingSession tsLoaded = Communication.getInstance().loadSession(ts);
                JOptionPane.showMessageDialog(this, "Training session has been loaded");
                JFrame frmTrainingSession = new FrmTrainingSession(socket, tsLoaded, ShowTypeEnum.EDIT, this);
                frmTrainingSession.setVisible(true);
                frmTrainingSession.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,"Training session can not be loaded", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_btnChangeActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tbl.getSelectedRow();
        if(row<0){
                JOptionPane.showMessageDialog(this,"Please select row", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        int option = JOptionPane.showConfirmDialog(this, "Are you sure?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
        
        if(option == JOptionPane.YES_OPTION){
            System.out.println(option);
            
            if(type.equals(ClassType.MEMBER)){
                try {
                    Member member = members.get(row);
                    Communication.getInstance().deleteMember(member);
                    JOptionPane.showMessageDialog(this, "Member has been deleted");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "", JOptionPane.ERROR_MESSAGE);
                }
                prepareTable();
            }else{
                try {
                    TrainingSession session = sessions.get(row);
                    Communication.getInstance().deleteTrainingSession(session);
                    JOptionPane.showMessageDialog(this, "Training session has been deleted");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Training session can not be deleted", "", JOptionPane.ERROR_MESSAGE);
                }
                prepareTable();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
        String search = txtSearch.getText();
        switch(type){
            case MEMBER:
                if(search.equals("") || search.isEmpty()) {
                    search= "";
                }else search = " WHERE lastname='"+search+"'";
                List<Member> members = Communication.getInstance().getMembers(search);
                tbl.setModel(new MemberTableModel(members));
                if(members.isEmpty()){
                    JOptionPane.showMessageDialog(this, "Member has not been found.","", JOptionPane.ERROR_MESSAGE);
                    txtSearch.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Member has been found.");
                }
                break;
            case COACH:
                if(search.equals("") || search.isEmpty()) {
                    search= "";
                }else search = " WHERE lastname='"+search+"'";
                List<Coach> coaches = Communication.getInstance().getCoaches(search);
                tbl.setModel(new CoachTableModel(coaches));
                if(coaches.isEmpty()){
                    JOptionPane.showMessageDialog(this, "Coach has not been found.","", JOptionPane.ERROR_MESSAGE);
                    txtSearch.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Coach has been found.");
                }
                break;
            case TRAININGSESSION:
                if(search.equals("") || search.isEmpty()) {
                    search= "";
                }else search = " WHERE c.lastname='"+search+"'";
                List<TrainingSession> sessions = Communication.getInstance().getSessions(search);
                //System.out.println(sessions.get(0).getTrainingItems());
                tbl.setModel(new TrainingSessionModel(sessions));
                if(sessions.isEmpty()){
                    JOptionPane.showMessageDialog(this, "Training session has not been found.","", JOptionPane.ERROR_MESSAGE);
                    txtSearch.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Training session has been found.");
                }
                break;
        }
    } catch (Exception ex) {
        Logger.getLogger(FrmViewAll.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    protected void prepareTable() {
        try{
            if(type.equals(ClassType.MEMBER)){
                //members=getMembers();
                members = Communication.getInstance().getMembers();
                tbl.setModel(new MemberTableModel(members));
            }else if(type.equals(ClassType.COACH)){
                //coaches=getCoaches();
                coaches = Communication.getInstance().getCoaches();
                tbl.setModel(new CoachTableModel(coaches));
            }else{
                //sessions=getSessions();
                sessions = Communication.getInstance().getSessions();
                tbl.setModel(new TrainingSessionModel(sessions));
            }
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "ERROR!", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex.getMessage());
        } 
        
    }

    
    

    private void prepareForm() {
//        txtSearch.setVisible(false);
//        btnSearch.setVisible(false);
        lblSearch.setText("Search coach lastname");
    }
    
    
}
