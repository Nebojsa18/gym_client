/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import communication.Communication;
import domain.Coach;
import domain.Excercise;
import domain.ItemAction;
import domain.Member;
import domain.TrainingItem;
import domain.TrainingSession;
import model.TrainingItemModel;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logic.ShowTypeEnum;



public class FrmTrainingSession extends javax.swing.JFrame {

    FrmViewAll forma;
    private List<Member> members;
    private List<Coach> coaches;
    private List<Excercise> excercises;
    private List<TrainingItem> items;
    private List<TrainingItem> oldItems;
    
    private TrainingSession session;
    private ShowTypeEnum operation;
    SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy.");
    
    public FrmTrainingSession(Socket socket, TrainingSession session,ShowTypeEnum operation,FrmViewAll forma) {
        initComponents();
        
        this.forma=forma;
        items=new ArrayList<TrainingItem>();
        prepareForm();
        if(session!=null){
            this.session=session;
        }else{
            this.session=new TrainingSession();
        }
        this.operation = operation;
        if(operation.equals(ShowTypeEnum.EDIT)){
            try {
                prepareFormEdit();
                System.out.println(session);
                oldItems = Communication.getInstance().loadSession(session).getTrainingItems();
                System.out.println("Stari itemi:" +oldItems);
                //treba da dovuce sve iteme koji su u ovom training sessionu
                
            } catch (Exception ex) {
                Logger.getLogger(FrmTrainingSession.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboMember = new javax.swing.JComboBox<>();
        comboCoach = new javax.swing.JComboBox<>();
        txtDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblExcercise = new javax.swing.JTable();
        comboExcercise = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnAddExcercise = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtReps = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Member");

        jLabel2.setText("Coach");

        jLabel3.setText("Date ");

        comboMember.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboCoach.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Training Items:");

        tblExcercise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblExcercise);

        comboExcercise.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Excercises");

        btnAddExcercise.setText("add excercise");
        btnAddExcercise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddExcerciseActionPerformed(evt);
            }
        });

        btnSave.setText("Save session");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel6.setText("Reps:");

        btnDelete.setText("Delete excercise");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtReps)
                                    .addComponent(comboExcercise, 0, 118, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddExcercise))))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboMember, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboCoach, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(125, 125, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(comboMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCoach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(btnDelete)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboExcercise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnAddExcercise))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtReps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddExcerciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddExcerciseActionPerformed
        if(!txtReps.getText().equals("")){
            TrainingItemModel model = (TrainingItemModel) tblExcercise.getModel();
            List<TrainingItem> itemList = model.getItems();
            Excercise excercise = (Excercise) comboExcercise.getSelectedItem();
            int reps = Integer.valueOf(txtReps.getText().trim());
            if(reps<=0){
                JOptionPane.showMessageDialog(this, "Enter number of reps greather than 0");
                return;
            }
            boolean add=true;
            if(itemList!=null){
                for (TrainingItem trainingItem : itemList) {
                    if(trainingItem.getExcercise().getId().equals(excercise.getId())){
                        trainingItem.setReps(reps);
                        add=false;
                        model.fireTableDataChanged();
                        break;
                    }
                }
            }
            if(add){
                TrainingItem item = new TrainingItem(null, session, excercise, reps); 
                model.add(item);
                txtReps.setText("");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please enter number of reps for this excercise!");
        }
        
    }//GEN-LAST:event_btnAddExcerciseActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblExcercise.getSelectedRow();
        TrainingItemModel model = (TrainingItemModel) tblExcercise.getModel();
        model.delete(row);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
         
        if(operation.equals(ShowTypeEnum.ADD)){
            saveSession();
            if(forma!=null){
                forma.prepareTable();
            }
        }
        else if(operation.equals(ShowTypeEnum.EDIT)){
            editSession();
            if(forma!=null){
                forma.prepareTable();
            }
        }
        
        
    }//GEN-LAST:event_btnSaveActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddExcercise;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<Object> comboCoach;
    private javax.swing.JComboBox<Object> comboExcercise;
    private javax.swing.JComboBox<Object> comboMember;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblExcercise;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtReps;
    // End of variables declaration//GEN-END:variables

    private void prepareCombos() {
        fillCoaches();
        fillMembers();
        fillExcercises();
    }

    private void fillMembers() {
        try {
            comboMember.removeAllItems();
//            Request request = new Request(Operation.GET_ALL_MEMBERS, null);
//            sender.send(request);
//            Response response = (Response) receiver.receive();
            members=Communication.getInstance().getMembers();
            for (Member member : members) {
                comboMember.addItem(member);
            }
            
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Can't load members" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillCoaches() {
        try {
            comboCoach.removeAllItems();
//            Request request1 = new Request(Operation.GET_ALL_COACHES,null);
//            sender.send(request1);
//            Response response = (Response) receiver.receive();
            coaches = Communication.getInstance().getCoaches();
            for (Coach coach : coaches) {
                comboCoach.addItem(coach);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Can't load coaches " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillExcercises() {
        try {
            comboExcercise.removeAllItems();
//            Request request1 = new Request(Operation.GET_ALL_EXCERCISES,null);
//            sender.send(request1);
//            Response response = (Response) receiver.receive();
            excercises = Communication.getInstance().getExcercises();
            for (Excercise excercise : excercises) {
                comboExcercise.addItem(excercise);
            }
        } catch (Exception ex) {
            //ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Can't load excercises" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void prepareTable() {
        TrainingItemModel model = new TrainingItemModel(items);
        tblExcercise.setModel(model);
    }

    private void addTrainingSession(TrainingSession session) {
        
    }

//    private void updateViewTable() {
//        if(forma!=null){
//            forma.prepareTable();
//        }
//    }

    private void prepareForm() {
        prepareCombos();
        prepareTable();
//        if(operation==ShowTypeEnum.EDIT){
//            prepareFormEdit();
//        }
    }

    private void saveSession(){
        try {
            TrainingItemModel model = (TrainingItemModel) tblExcercise.getModel();
            items = model.getItems();
            Coach coach = (Coach) comboCoach.getSelectedItem();
            Member member = (Member) comboMember.getSelectedItem();
            Date date=null;
            try {
                date = sdf.parse(txtDate.getText());
            } catch (ParseException ex) {
                //ex.printStackTrace();
    //            JOptionPane.showMessageDialog(this, "Date is not in correct format (dd.MM.yyyy.)! " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                throw ex;
            }
            session.setDate(date);
            session.setCoach(coach);
            session.setMember(member);
            session.setTrainingItems(items);
            if(session.getTrainingItems().size()==0){
                throw new Exception("Can't save training session without any training items");
            }
            Communication.getInstance().addTrainingSession(session);

            JOptionPane.showMessageDialog(this,"Training session successfully saved");
                
        } catch (Exception ex) {
            //ex.printStackTrace();
            //JOptionPane.showMessageDialog(this, "Training session is not saved! " + "", "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "", JOptionPane.ERROR_MESSAGE);
        }
        //addTrainingSession(session);
        //updateViewTable();
    }

    private void editSession() {
        try {
            Coach coach = (Coach) comboCoach.getSelectedItem();
            Member member = (Member) comboMember.getSelectedItem();
            Date date=null;
            try {
                date = sdf.parse(txtDate.getText());
            } catch (ParseException ex) {
//                ex.printStackTrace();
//                JOptionPane.showMessageDialog(this, "Date is not in correct format (dd.MM.yyyy.)! " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                throw ex;
            }
            TrainingItemModel model = (TrainingItemModel) tblExcercise.getModel();
            List<TrainingItem> newItems = model.getItems();
            if(newItems.size()==0){
                throw new Exception("Can't save training session without any training items");
            }
            session.setDate(date);
            session.setCoach(coach);
            session.setMember(member);
            
            //Da proveri da li treba da doda u bazu, izmeni ili izbrise.
            newItems = checkForAdd(newItems);
            System.out.println("Dal je dodat "+newItems);
            
            newItems = checkForDelete(newItems);
            System.out.println("provera delete edit "+newItems);
            System.out.println("Nova lista itema" + newItems);
            
            session.setTrainingItems(newItems);
            
            Communication.getInstance().editTrainingSession(session);
            
            JOptionPane.showMessageDialog(this,"Training session successfully updated");
                
        
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(this, ex.getMessage(), "", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void prepareFormEdit() {
        comboMember.setSelectedItem(session.getMember());
        comboCoach.setSelectedItem(session.getCoach());
        txtDate.setText(sdf.format(session.getDate()));
        System.out.println(session.getTrainingItems());
        TrainingItemModel model = new TrainingItemModel(session.getTrainingItems());
        tblExcercise.setModel(model);
    }

    private List<TrainingItem> checkForAdd(List<TrainingItem> newItems) {
        List<TrainingItem> newItems1 = newItems;
        for (TrainingItem newItem : newItems1) {
            //prolazi kroz listu i ako nadje jedan isti training item stavlja na false i nece biti dodat novi u bazu
            boolean add = true;
            for (TrainingItem oldItem : oldItems) {
                if(oldItem.getExcercise().getId().equals(newItem.getExcercise().getId())){
                    add=false;
                    break;
                }
            }
            if(add==true){
                newItem.setAction(ItemAction.ADD);
            }
        }
        
        return newItems1;
    }

    private List<TrainingItem> checkForDelete(List<TrainingItem> newItems) {
        List<TrainingItem> newItems1 = newItems;
        //prolazim kroz staru listu i proveravam da li su id itema isti, ako jesu stavljam UPDATE
        for (TrainingItem oldItem : oldItems) {
            //ako pronadje isti, delete se stavlja na false
            //ako ne pronadje isti, delete ostaje true i u sl uslovu se postavlja akcija DELETE na el stare liste i dodaje
            //se novoj listi da vi se obrisao iz baze
            boolean delete = true;
            for (TrainingItem newItem : newItems1) {
                if(oldItem.getExcercise().getId().equals(newItem.getExcercise().getId())){
                    newItem.setAction(ItemAction.UPDATE);
                    delete=false;
                }
            }if(delete){
                oldItem.setAction(ItemAction.DELETE);
                newItems1.add(oldItem);
            }
        }
        return newItems1;
    }

    

    
}
